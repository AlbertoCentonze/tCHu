package ch.epfl.tchu.game;

import ch.epfl.tchu.SortedBag;

import java.util.List;
import java.util.Map;

/**
 * @author Alberto Centonze (327267)
 */
public interface Player {
    /**
     * Called at the beginning of the game to give to each player
     * their own Id and names
     * @param ownId the id of the player
     * @param playerNames the list containing the string representation of their names
     */
    abstract void initPlayers(PlayerId ownId, Map<PlayerId, String> playerNames);

    /**
     * Makes the player receive an information
     * @param info the information (usually generated by Info)
     */
    abstract void receiveInfo(String info);

    /**
     * Informs the player that his state has changed
     * @param newState the new state
     * @param ownState the previous state
     */
    abstract void updateState(PublicGameState newState, PlayerState ownState);

    /**
     * Informs to the player about his initial tickets
     * @param tickets the tickets of the player
     */
    abstract void setInitialTicketChoice(SortedBag<Ticket> tickets);

    /**
     * Asks to the player which tickets he wants to keep
     * @return the kept tickets
     */
    abstract SortedBag<Ticket> chooseInitialTickets();

    /**
     * Asks to the player what kind of operation he wants to
     * do this turn
     * @return
     */
    abstract TurnKind nextTurn();

    /**
     * Inform the player about the additionalTickets
     * @param options
     * @return
     */
    abstract SortedBag<Ticket> chooseTickets(SortedBag<Ticket> options);

    /**
     * Asks to the player the source to draw cards from
     * @return an integer between -1 and 4
     */
    abstract int drawSlot();

    /**
     * Called to know which Route the player want to claim
     * @return the Route claimed
     */
    abstract Route claimedRoute();

    /**
     * Called to know witch which cards the player wants to attempt
     * to claim a Route
     * @return the cards to be used
     */
    abstract SortedBag<Card> initialClaimCards();

    /**
     * Gives the possible options to the player to claim a tunnel
     * @param options the various options
     * @return an empty SortedBag if the player won't claim the tunnel and the chosen option otherwise
     */
    abstract SortedBag<Card> chooseAdditionalCards(List<SortedBag<Card>> options);

    /**
     * The various types of turns available in the game
     */
    public enum TurnKind {
        DRAW_TICKETS, DRAW_CARDS, CLAIM_ROUTE;
        final public static List<TurnKind> ALL = List.of(TurnKind.values());
    }
}
